var player;
var obstacles = []; // Array for obstacles
var exit;
var exitSize = 50;
var win = false;

function setup() {
  createCanvas(800, 600);
  player = new Player();
  exit = createVector(width - exitSize, height / 2);

  // Create obstacles array
  for (var i = 0; i < 5; i++) {
    obstacles.push(new Obstacle());
  }
}

function draw() {
  background(0);

  // Check if player has reached the exit
  if (player.checkExit()) {
    win = true;
  }

  // Win message
  if (win) {
    textSize(32);
    fill(255);
    textAlign(CENTER, CENTER);
    text("You Win!", width / 2, height / 2);
  } else {
    // Move and display player
    player.move();
    player.display();

    // Move and display obstacles
    for (var i = 0; i < obstacles.length; i++) {
      obstacles[i].move();
      obstacles[i].display();
    }

    // Display exit
    fill(0, 255, 0);
    rect(exit.x - exitSize / 2, exit.y - exitSize / 2, exitSize, exitSize);
  }
}

function keyPressed() {
  // Control player movement
  if (keyCode === UP_ARROW) {
    player.moveUp();
  } else if (keyCode === DOWN_ARROW) {
    player.moveDown();
  } else if (keyCode === LEFT_ARROW) {
    player.moveLeft();
  } else if (keyCode === RIGHT_ARROW) {
    player.moveRight();
  }
}

function mousePressed() {
  // Add a non-moving obstacle at the mouse position to the obstacles array
  obstacles.push(new Obstacle(mouseX, mouseY, true));
}

// Player class
class Player {
  constructor() {
    this.position = createVector(50, 50);
    this.radius = 25;
    this.speed = 5;
  }

  move() {
    // Move player
    this.position.x = constrain(this.position.x, 0, width - this.radius);
    this.position.y = constrain(this.position.y, 0, height - this.radius);
  }

  moveUp() {
    this.position.y -= this.speed;
  }

  moveDown() {
    this.position.y += this.speed;
  }

  moveLeft() {
    this.position.x -= this.speed;
  }

  moveRight() {
    this.position.x += this.speed;
  }

  display() {
    fill(227, 54, 207);
    circle(this.position.x, this.position.y, this.radius * 2);
  }

  checkExit() {
    // Check if player has reached the exit
    var distance = dist(this.position.x, this.position.y, exit.x, exit.y);
    return distance < this.radius / 2 + exitSize / 2;
  }
}

class Obstacle {
  constructor(x, y, isStatic) {
    this.position = createVector(x || random(width), y || random(height));
    this.size = random(15, 30);
    this.isStatic = isStatic || false;
    this.xSpeed = random(-2, 2);
    this.ySpeed = random(-2, 2);
    this.shapeType = floor(random(3)); // 0: Circle, 1: Rectangle, 2: Triangle
    this.color = color(random(255), random(255), random(255));
  }

  move() {
    // Move obstacle randomly
    if (!this.isStatic) {
      this.position.x += this.xSpeed;
      this.position.y += this.ySpeed;

      // Wrap around screen if obstacle goes off the edge
      this.position.x = (this.position.x + width) % width;
      this.position.y = (this.position.y + height) % height;
    }
  }

  display() {
    fill(this.color);

    switch (this.shapeType) {
      case 0: // Circle
        ellipse(this.position.x, this.position.y, this.size * 2);
        break;
      case 1: // Rectangle
        rect(this.position.x - this.size, this.position.y - this.size, this.size * 2, this.size * 2);
        break;
      case 2: // Triangle
        triangle(
          this.position.x - this.size, this.position.y + this.size,
          this.position.x + this.size, this.position.y + this.size,
          this.position.x, this.position.y - this.size
        );
        break;
    }
  }
}
